// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // url      = env("DATABASE_URL")
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Resume {
  id     String @id @default(cuid())
  userId String

  title       String?
  description String?

  photoUrl           String?
  colorHex           String  @default("#0693E3")
  borderStyle        String  @default("squircle")
  fontSize           String  @default("medium")
  fontFamily         String  @default("Arial")
  fontWeight         String  @default("normal")
  fontStyle          String  @default("normal")
  layoutStyle        String  @default("classic")
  summary            String?
  summaryName        String  @default("About Me")
  personalDetailName String  @default("Personal Details")
  name               String?
  firstName          String?
  lastName           String?
  jobTitle           String?
  location           String?
  phone              String?
  email              String?
  linkedin           String?
  github             String?
  website            String?

  isPhotoSection         Boolean @default(false)
  isSummarySection       Boolean @default(true)
  isEmailSection         Boolean @default(true)
  isLocationSection      Boolean @default(true)
  isPhoneSection         Boolean @default(true)
  isJobTitleSection      Boolean @default(true)
  isLinkedinSection      Boolean @default(false)
  isGithubSection        Boolean @default(false)
  isSocialLinkSection    Boolean @default(false)
  isWebsiteSection       Boolean @default(false)
  isWorkSection          Boolean @default(true)
  isEducationSection     Boolean @default(true)
  isSkillSection         Boolean @default(true)
  isLanguageSection      Boolean @default(false)
  isInterestSection      Boolean @default(false)
  isKeyachivementSection Boolean @default(false)

  workExperienceSectionName String           @default("Work Experience")
  educationSectionName      String           @default("Education")
  skillsSectionName         String           @default("Skills")
  languagesSectionName      String           @default("Languages")
  interestsSectionName      String           @default("Interests")
  workExperiences           WorkExperience[]
  educations                Education[]
  skills                    Skill[]
  languages                 Language[]
  interests                 Interest[]
  keyachivements            Keyachivement[]
  // references  Reference[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resumes")
}

model WorkExperience {
  id String @id @default(cuid())

  position    String?
  company     String?
  startDate   String?
  endDate     String?
  description String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experiences")
}

model Education {
  id String @id @default(cuid())

  degree    String?
  school    String?
  startDate String?
  endDate   String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("educations")
}

model Skill {
  id       String  @id @default(cuid())
  name     String?
  resume   Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

model Language {
  id       String  @id @default(cuid())
  name     String?
  resume   Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("languages")
}

model Interest {
  id       String  @id @default(cuid())
  name     String?
  resume   Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("interests")
}

model Keyachivement {
  id          String  @id @default(cuid())
  name        String?
  description String?
  resume      Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("keyachivements")
}

model UserSubscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  stripecustomerId        String   @unique
  stripeSubscriptionId    String   @unique
  stripePriceId           String
  stripeCurrentPeriodEnd  DateTime
  stripeCancelAtPeriodEnd Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_subscriptions")
}

model userSubscriptionForRazorPay {
  id                        String    @id @default(uuid())
  userId                    String    @unique
  razorpaySubId             String    @unique
  razorpayPlanId            String?
  razorpayPaymentId         String?
  razorpayCustomerId        String?
  status                    String
  currentPeriodEnd          DateTime?
  razorpayCancelAtPeriodEnd Boolean   @default(false)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  @@map("user_subscription_razorpay")
}
